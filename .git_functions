# Get The Name Of The Branch Contained In The Current Folder
function git-branch-parse {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/[\1]/'
}

# Create A Local Branch And Push It To The Remote Repository
# $1 = Branch Name
function git-create-branch {
  if [[ ! -z ${1} ]]; then
    git checkout -b \"${1}\"
    git push --set-upstream origin \"${1}\"
  fi
}

# Commit All Changed Files To Git
# $1 = Commit Message
function git-commit {
  if [[ ! -z ${1} ]]; then
    git add .
    git commit -S -m "${1}"
  else
    echo "[ERROR] No Commit Message Specified."
  fi
}

# Delete A Branch Locally And Remotely
# $1 = Branch Name
function git-delete-branch {
  if [[ ! -z ${1} ]]; then
    branch_in_local=`git branch | grep -i "${1}"`
    if [[ ! -z ${branch_in_local} ]]; then
      git branch -d \"${branch_in_local}\"
      git push -d origin \"${branch_in_local}\"
    fi
  fi
}

# Create A Commit And Push It To The Remote Repository
# $1 = Commit Message
function git-push {
  if [[ ! -z ${1} ]]; then
    git add .
    git commit -S -m "${1}"
    git push --set-upstream origin $(git branch --show-current)
  else
    echo "[ERROR] No Commit Message Specified."
  fi
}

# Show List Of Local Git Branches
function git-show-local {
  local start_dir=$(pwd)
  local git_app_dirs=($(find ${BNC_REPOS_DIR}/* -maxdepth 0))

  for app_dir in ${git_app_dirs[@]}; do
    echo "App: $(basename ${app_dir})"
    git_repo_dirs=($(find ${app_dir}/* -maxdepth 0 -type d))

    for repo_dir in ${git_repo_dirs}; do
      echo "  Repo: $(basename ${repo_dir})"
      local_branches=$(grep -E '^\[branch.*\]$' ${repo_dir}/.git/config | sed -e 's/^\[branch \"//g' | sed -e 's/\"\]//g')
      for branch_name in ${local_branches[@]}; do
        echo "    Branch: ${branch_name}"
      done
    done
    echo ""
  done

  cd ${start_dir}
}

# Switch Branch And Pull From Remote To Update It
# $1 = Branch Name
function git-switch {
  branch_name=${1}

  if [[ ! -z ${branch_name} ]]; then
    git branch | grep -i ${branch_name} > /dev/null 2>&1

    if [[ ${?} -eq 0 ]]; then
      git switch ${branch_name} > /dev/null 2>@1 | grep -i "behind" > /dev/null 2>&1

      echo "Switched Branch To '${branchName}'."

      if [[ ${?} -eq 0 ]]; then
        echo "Local Branch ${branch_name} Is Up To Date With Remote."
      else
        echo "Local Branch '${branch_name}' Is Behind Remote. Pulling Changes From Remote."
        git pull > /dev/null 2>&1

        if [[ ${?} -eq 0 ]]; then
          echo "Pull Successful."
        else
          echo "Pull Failed."
        fi
      fi
    else
      echo "Branch ${branch_name} Does Not Exist Locally."
    fi
  else
    echo "No Branch Name Specified to git-switch."
  fi
}

# Update Branches In Git Repos
# $1 = app | all
function git-update-branches {
  _print-header "Updating Local Git Branches"

  if [[ ! (${1} == "app" || ${1} == "all") ]]; then
    echo "SYNTAX: git-update-branch [all|app]"
    return 1
  fi

  local start_dir=$(pwd)
  local logs_dir=${HOME}/.git-update
  local git_app_dirs=($(find ${BNC_REPOS_DIR}/* -maxdepth 0))

  mkdir -p ${logs_dir}

  if [[ ${1} == "app" ]]; then
    local app_index=1

    echo "App List:"
    echo ""

    for app_name in ${git_app_dirs[@]}; do
      echo "   ${app_index}: $(basename ${app_name})"
      (( app_index++ ))
    done
    
    echo ""
    echo -n "Enter A Project Index [1 - $(( ${app_index} - 1 ))]: "
    read selected_app_index

    if [[ ${selected_app_index} -lt 1 || ${selected_app_index} -gt $(( ${app_index} -1 )) ]]; then
      echo "[ERROR] Invalid Application Index Selected"
      return 1
    else
      local git_app_dirs=(${git_app_dirs[${selected_app_index}]})
    fi
  fi

  for app_dir in ${git_app_dirs[@]}; do
    mkdir -p ${logs_dir}/$(basename ${app_dir})

    echo "App: $(basename ${app_dir})"
    
    if [[ $(ls -A ${app_dir}) ]]; then
      git_repo_dirs=($(find ${app_dir}/* -maxdepth 0 -type d))
    else
      git_repo_dirs=()
    fi

    for repo_dir in ${git_repo_dirs[@]}; do
      local log_file=${logs_dir}/$(basename ${app_dir})/$(basename ${repo_dir}).log
      
      echo "   Repo: $(basename ${repo_dir})"
      local_branches=$(grep -E '^\[branch.*\]$' ${repo_dir}/.git/config | sed 's/^\[branch \"//g' | sed 's/\"\]//g')
      
      for local_branch in ${local_branches}; do
        printf '      Branch: %-60s Status: ' "${local_branch}"

        cd ${repo_dir}
        git switch ${local_branch} &> /dev/null
        git pull &>> ${log_file}

        if [[ $? -eq 0 ]]; then
          echo "Success."
        else
          echo "Failed. See Log file ${log_file}"
        fi
      done
    done
    echo ""
  done

  cd ${start_dir}
}
