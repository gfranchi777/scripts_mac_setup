# Print Completed or Failed Based On The Last
# Command Exit Status.
function _print-cmd-status {
  if [[ ${?} -eq 0 ]]; then
    echo "${GREEN}Completed${WHITE}"
  else
    echo "${RED}Failed${WHITE}"
  fi
}

# Print A Header Used For CLI Output
# $1 = Header Text
function _print-header {
  local header_char="*"
  local header_cols=65
  local printed_header_char=0

  echo -n "${YELLOW}"

  while [[ ${printed_header_char} -lt ${header_cols} ]]; do
    echo -n ${header_char}
    ((printed_header_char++))
  done
  
  echo "\n${1}"

  printed_header_char=0

  while [[ ${printed_header_char} -lt ${header_cols} ]]; do
    echo -n ${header_char}
    printed_header_char=$[${printed_header_char}+1]
  done

  echo "${WHITE}\n"
}

# Create An Entry In aws-vault
# $1 = Name Of New AWS Vault Entry
function aws-vault-add {
  if [[ ! -z ${1} ]]; then
    echo "Adding entry ${1} to aws-vault"
    aws-vault add ${1}
    entry_added=`aws-vault list | grep -i "${1}"`

    if [[ ! -z ${entry_added} ]]; then
      echo "Entry ${1} was added to aws-vault"
    else
      echo "[ERROR] Entry ${1} was not added to aws-vault"
    fi
  fi
}

# Decode A Base 64 Input And Save It As A Clear Text File
# $1 = File To Decode
function base64-decode {
  if [[ -f ${1} ]]; then
    echo "Decoding Base 64 File ${1}."

    file_name=${1}
    
    if [[ ${file_name##*.} == "b64" ]]; then
      file_name=${file_name%.*}.clear
    fi

    cat ${1} | base64 -d  > ${file_name}

    echo "Saved Decoded File As ${file_name}"
  fi
}

# Take A Clear Text Input And Save It As A Base 64 Encoded File
# $1 = File To Encode
function base64-encode {
  if [[ -f ${1} ]]; then
    echo "Encoding File ${1} To Base 64."

    base64 -i ${1} > ${1}.b64

    echo "Saved Encoded File As ${1}.b64"
  fi
}

# Update / Upgrade Homebrew
function brew-update {
  _print-header "Updating HomeBrew Apps"

  brew update
  brew upgrade
  brew upgrade --cask --greedy

  echo ""
}

# Cache GPG And SSH Keys Used For Bitbucket
function cache-all-keys {
  local host_index=1

  _print-header "Caching Bitbucket Keys"

  eval $(ssh-agent) > /dev/null 2>&1

  gpgconf --kill all

  for git_host in ${GIT_HOSTS}; do
    #GPG Key Caching
    #Fetch GPG Key Passphrase From Keychain 
    local gpg_key_passphrase=$(security find-generic-password -w -s "${git_host}_gpg-key" ${GIT_KEYCHAIN})

    #Get GPG Fingerprint 
    local fingerprint=($(gpg --list-keys --fingerprint -a "${GIT_EMAILS[${host_index}]}"| sed -n '2 p' | awk '{ gsub(/ /,""); print }'))

    echo -n "Caching ${git_host} GPG Key..."

    touch /tmp/tmp_gpg.txt

    gpg --encrypt \
        --pinentry-mode=loopback \
        --batch \
        --sign \
        --yes \
        --default-key ${fingerprint} \
        --passphrase ${gpg_key_passphrase} \
        --recipient ${GIT_EMAILS[${host_index}]} \
        /tmp/tmp_gpg.txt &> /dev/null

    _print-cmd-status

    rm /tmp/tmp_gpg.txt

    #SSH Key Caching
    #Fetch SSH Key Passphrase From Keychain
    export SSH_KEY_PASS=$(security find-generic-password -w -s "${git_host}_ssh-key" ${GIT_KEYCHAIN})

    echo -n "Caching ${git_host} SSH Key..."
    
    #Cache SSH Key
    local ssh_key=$(openssl rsa -in ${GIT_SSH_KEYS[${host_index}]} -passin env:SSH_KEY_PASS 2> /dev/null)
    ssh-add -q - <<< "${ssh_key}"

    _print-cmd-status
    
    # Cleanup
    unset fingerprint
    unset gpg_key_passphrase
    unset SSH_KEY_PASS
    unset ssh_key
    
    ((host_index++))
  done

  echo ""
}

# Export The Jira Rest API Token
function cache-jira-api-token {
  _print-header "Exporting Jira Rest API Token"
  
  echo -n "Exporting Jira API Token..."

  #export JIRA_API_TOKEN=$(security find-generic-password -w -s "jira-rest-api-token" ${FRAG002_KEYCHAIN})

  if [[ -n ${JIRA_API_TOKEN} ]]; then
    echo "${GREEN}Completed${WHITE}."
  else
    echo "${RED}Failed${WHITE}."
  fi

  echo ""
}

# Search starting at the current directory for a text pattern inside any files
# in the current directory or it's sub directories
# $1 = Search Pattern
function find-in-files {
  if [[ -z ${1} ]]; then
    echo "[${RED}ERROR${WHITE}] No Search Pattern Passed To Command."
    return 1
  fi

  find . -type f -exec grep -i ${1} '{}' \; -print
}

# Cache SSH and GPG Keys As Well As A Token Used For Jira API Calls
function setup-cache {
  keychain-unlock

  cache-all-keys

  keychain-lock
}

# Automate The Daily Update Tasks
function setup-env {
  setup-cache

  brew-update
  
  git-update-branches all
}

# Get a random quote from an online api.
# If the api call fails, then default to the local ~/.quotes file.
function get-random-quote {
  local api_uri="https://zenquotes.io/api/random"

  local status_code=$(curl --write-out %{http_code} --silent --output /dev/null ${api_uri})
  
  if [[ ${status_code} -eq 200 ]]; then
    response=$(curl -s ${api_uri})

    echo ${response} | jq -r '.[] | "\(.q)"'
    echo ${response} | jq -r '.[] | "- \(.a)"'
  else
    local quote_file=~/.quotes
    local quote_index=$(shuf -i 1-$(sed -n '$=' ${quote_file}) -n 1)

    if [[ $(expr ${quote_index} % 2) -eq 0 ]]; then
      ((quote_index--))
    fi
  
    sed -n "${quote_index}p;$((quote_index + 1))p" ${quote_file} | \
      fold -sw $(echo -n ${PS1} | wc -m)
    fi
}

# Generate A Certificate Signing Request From A Java Keystore
# $1 = Keystore Name
# $2 = Certificate Alias
function gen-csr {
  keytool -certreq -keystore ${1} -alias ${2} -file ${2}.csr
}

# Make An API Call To Jira
# $1 = API To Call
function jira-api {
   local url_base='https://jira.bnc.ca/rest/api/2'

   if [[ -z ${1} ]]; then
     #ERROR
     return 1
   fi

   curl --request GET \
        --url "${url_base}/${1}" \
        --header 'Accept: application/json' \
        --header "Authorization: Bearer ${JIRA_API_TOKEN}"\
}

# Lock A MacOs Keychain
# $1 = The Name Of The Keychain To Lock
function keychain-lock {
  _print-header "Locking Keychains"

  for keychain in ${KEYCHAINS[@]}; do
    echo -n "Locking keychain $(basename ${keychain})..."

    security lock-keychain ${keychain}

    _print-cmd-status
  done

  echo ""
}

# Unlock A MacOS Keychain
function keychain-unlock {
  echo -n "Keychain Unlock Password: "
  read -s keychain_password
  echo "\n"

  if [[ -n ${keychain_password} ]]; then
    _print-header "Unlocking Keychains"
    
    for keychain in ${KEYCHAINS[@]}; do
      echo -n "Unlocking keychain $(basename ${keychain})..."

      security unlock-keychain -p ${keychain_password} ${keychain} 2> /dev/null
      
      _print-cmd-status
    done

    unset keychain_password
  else
    echo "${RED}Failed${WHITE}."
    echo "[${RED}ERROR]${WHITE} No Password Entered."
    return 1  
  fi

  echo ""
}

# List All Aliases And Functions Contained In ~/.bash_aliases
function list-aliases-and-functions() {
  shell_type=$(basename ${SHELL})

  printf "\n==============\nCustom Aliases\n==============\n\n"
  grep "^alias" ~/.${shell_type}_aliases | sort | sed 's/alias //g'

  printf "\n================\nCustom Functions\n================\n\n"
  grep "^function" ~/.${shell_type}_functions | \
    sort | \
    sed 's/function //g' | \
    sed 's/\ {//g'
  
  printf "\n"
}

# Map Personal Drive
function map-personal-drive {
  _print-header "Mapping Personal Network Drive"

  if [[ -z $(mount | grep $(basename ${LEGACY_PERSONAL_DRIVE})) ]]; then
    open ${LEGACY_PERSONAL_DRIVE}
    _print-cmd-status
  else
    echo "Drive Already Mapped."
  fi

  echo ""
}

# Login To Vault And Get A Token
function vault-login {
  export VAULT_TOKEN=`vault login -token-only \
                                  -method=ldap username=${SHORT_ID}`
  
  echo -n "Logging into Vault (${VAULT_ADDR})..."

  if [[ -n ${VAULT_TOKEN} ]]; then
    echo "${GREEN}Completed${WHITE}."
  else
    echo "${RED}Failed${WHITE}."
  fi
}

# List All Certificate Entries In A Java Keystore
# $1 = Keystore File
function view-jks-certificate-entries {
  openssl x509 -in ${1} -noout -text | head -11
}
